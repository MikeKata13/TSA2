rm(list=ls())

D <- read.table("A1_co2.txt", header = TRUE, sep = "")


Dataset_model <- subset(D, year <= 2017)
D_test <- subset(D, year >= 2018)

time_tr<-as.matrix(Dataset_model$time)
co2_tr<-as.matrix(Dataset_model$co2)

time_test <-as.matrix(D_test$time)
co2_test<-as.matrix(D_test$co2)

n_tr <- length(time_tr)
n_test <- length(time_test)

p<-1

#   1.1

# 1rst Plot
plot(co2_tr ~ time_tr, type = "l", main = "CO2 over time",
     xlab = "Time", ylab = "CO2", col = "blue", lwd = 2)
lines(co2_test ~ time_test, type = "l", col = "red", lty = 2)

# Add a legend and grid
legend("bottomright", legend = c("Model Data", "Test Data"), col = c("blue", "red"),
       lty = c(1, 2), cex = 1.2)
grid(lty = 3)

# Increase the font size of the axis labels and title
par(cex.lab = 1.2, cex.main = 1.5)

#   1.2.1
ls_x<-cbind(1, time_tr, sin(2*pi*time_tr / as.numeric(p)), cos(2*pi*time_tr / as.numeric(p)))
ls_x_1<-cbind(1, time_tr, sin(2*pi*time_tr), cos(2*pi*time_tr))

(ols_ls_x <- solve (t(ls_x) %*% ls_x) %*% (t(ls_x) %*% co2_tr))
(ols_ls_x_1 <- solve (t(ls_x_1) %*% ls_x_1) %*% (t(ls_x_1) %*% co2_tr))

#   1.2.2

sigma_ols<-t(co2_tr-(ls_x%*%ols_ls_x))%*%(co2_tr-(ls_x%*%ols_ls_x))/(n_tr-4)
sigma_ols_2<-t(co2_tr-(ls_x_1%*%ols_ls_x_1))%*%(co2_tr-(ls_x_1%*%ols_ls_x_1))/(n_tr-4)

variance_ols<- as.numeric(sigma_ols) * solve(t(ls_x) %*% ls_x)
variance_ols_1<- as.numeric(sigma_ols_2) * solve(t(ls_x_1) %*% ls_x_1)

#   1.2.3

fit_1 <- lm(co2_tr ~ time_tr + sin(2*pi*time_tr / as.numeric(p))  + cos(2*pi*time_tr / as.numeric(p)), data = Dataset_model)
confint(fit_1)
coef(fit_1)
summary(fit_1)
test_fit_1 <- lm(co2_test ~ time_test + sin(2*pi*time_test / as.numeric(p))  + cos(2*pi*time_test / as.numeric(p)), data = D_test)
ols_x3 <- data.frame(cbind(1, time_test, sin(2*pi*time_test / as.numeric(p)), cos(2*pi*time_test / as.numeric(p))))
prediction_of_test <- predict(test_fit_1, ols_x3)

p<-12
fit_new <- lm(co2_tr ~ time_tr + sin(2*pi*time_tr)  + cos(2*pi*time_tr), data = Dataset_model)
confint(fit_new)
coef(fit_new)
summary(fit_new)
test_fit_new <- lm(co2_test ~ time_test + sin(2*pi*time_test)  + cos(2*pi*time_test), data = D_test)
ols_x3_new <- data.frame(cbind(1, time_test, sin(2*pi*time_test), cos(2*pi*time_test)))
prediction_of_test2 <- predict(test_fit_new, ols_x3_new)

######### Important PLOTS ##############
#   1.2.3

# Plot of 1.2.3
plot(co2_tr ~ time_tr, Dataset_model, col = "black", type = "l",main = "CO2 over time", xlab = "Time", ylab = "CO2", lwd = 2)

# Add the fitted values and test data to the plot
lines(fit_1$fitted.values ~ time_tr, Dataset_model, col = "red", lwd = 2, lty = 2)
lines(prediction_of_test ~ time_test, D_test, col = "blue", lwd = 2)

# Add a legend and grid
legend("bottomright", legend = c("Model Data", "Fitted Values", "Test Data"),col = c("black", "red", "blue"), lty = c(1, 2, 1), cex = 1.2)
grid(lty = 3)

# Increase the font size of the title, axis labels, and legend
par(cex.lab = 1.2, cex.main = 1.5, cex.legend = 1.2)

#   1.2.5

Sigma_matrix <- matrix(0, nrow(ls_x), nrow(ls_x))
rho <- 0.5

for(k in 1:5){
  for(i in 1:718){
    for(j in i:718){
      Sigma_matrix[i,j]<-rho^abs(i-j)
      Sigma_matrix[j,i]<-rho^abs(i-j)
    }
  }
  wls <- solve(t(ls_x)%*%solve(Sigma_matrix)%*%ls_x)%*%(t(ls_x)%*%solve(Sigma_matrix)%*%co2_tr) 
  eps <- co2_tr - ls_x%*%wls
  rho <- cor(eps[1:718-1],eps[2:718])
}

#   1.2.6

Sigma_wls<-t(co2_tr-(ls_x%*%wls))%*% solve(Sigma_matrix) %*%(co2_tr-(ls_x%*%wls))/(718-4)
Variance_wls<- as.numeric(Sigma_wls) * solve(t(ls_x) %*% ls_x)

#   1.2.7
p<-12
y_of_wls <- ls_x %*% wls

wls_fit_7 <- lm(y_of_wls ~ time_tr + sin(2*pi*time_tr / as.numeric(p))  + cos(2*pi*time_tr / as.numeric(p)), data = Dataset_model)
confint(wls_fit_7)
coef(wls_fit_7)
summary(wls_fit_7)
plot(co2_tr~time_tr,Dataset_model, col=1,type="l")
lines(wls_fit_7$fitted.values~time_tr, col=2, Dataset_model)
legend("bottomright", legend=c("Model Data", "Fitted Values"),col=c("black", "red"), lty=1, cex=1)

#   1.3.1
lambda <- 0.90 

f<- function(j) rbind(1, j, sin(2*pi*j/as.numeric(p)), cos(2*pi*j/as.numeric(p))) 

L <- matrix(c(1, 0, 0, 0, 
              
              1, 1, 0, 0, 
              
              0, 0, cos(2*pi/as.numeric(p)), sin(2*pi/as.numeric(p)), 
              
              0, 0, -sin(2*pi/as.numeric(p)), cos(2*pi/as.numeric(p))), 
            
            nrow = 4, byrow = TRUE) 
L_Inv <- solve(L)

#   1.3.2
init <- 10

F <- matrix(0, nrow=4, ncol=4)
h <- matrix(0,nrow=4,ncol=1)
Î¤ <- 0
theta.all_3 <- matrix(NA,ncol=4, nrow=n_tr)
sigma.all_3 <- matrix(NA, nrow=n_tr, ncol=1)
sd.theta.all_3 <- matrix(NA,ncol=4, nrow=n_tr)
yt_pred.all_3 <- rep(NA, n_tr)

sigma_new <- c()

t.smth <- qt(p=0.95, df=(1:n_tr)-4)
t.smth[1:init] <- NA
yt_pred.all_4 <- rep(NA, n_tr)
yt_pr.l.all_4 <- rep(NA, n_tr)

for (j in 0:(init-1)){
  F <- F + (lambda^(j))*f(-j)%*%t(f(-j))
  h <- h + (lambda^(j))*f(-j)*co2_tr[init-j]
  T <- T + lambda^j
  sigma_new <- c(sigma_new, lambda^(init-j-1))
}
ltm_sigma <- diag(sigma_new)

##
theta.hat_final <- solve(F, h)
theta.all_3[init,] <- solve(F, h)
yt_pred.all_3[init+1] <- t(f(1)) %*% theta.hat_final

for (i in (init+1):n_tr){
  F <- F + (lambda^(i-1))*f(- (i-1)) %*% t(f(- (i-1)))
  h <- lambda*solve(L) %*% h + f(0)*co2_tr[i]
  T <- 0
  sigma_new <- c()
  for (j in 0:(i-1)){
    T <- T + lambda^j
    sigma_new <- append(sigma_new, lambda^(i-j-1))
  }
ltm_sigma <- diag(sigma_new)
theta.hat_final <-  solve(F, h)
theta.all_3[i,] <- theta.hat_final
errors <- co2_tr[1:i] - cbind(1, -(i-1):0, sin(2*pi*(-(i-1):0)/p), cos(2*pi*(-(i-1):0)/p)) %*% theta.hat_final
sigma.all_3[i] <- sqrt((t(errors)%*% ltm_sigma %*% errors)/(T-4))
yt_pred.all_3[i+1] <- t(f(1)) %*% theta.hat_final
yt_pr.l.all_4[i+1] <- yt_pred.all_3[i+1] - t.smth[i]*sigma.all_3[i]*sqrt(1+t(f(1)) %*% solve(F) %*% f(1))
yt_pred.all_4[i+1] <- yt_pred.all_3[i+1] + t.smth[i]*sigma.all_3[i]*sqrt(1+t(f(1)) %*% solve(F) %*% f(1))

#   1.3.3

plot(co2_tr-yt_pred.all_3[1:718]~time_tr)

plot(co2_tr[11:728]-yt_pred.all_3[11:728], type="l", ylab="One Step Prediction Error", xlab="Observation")
lines(sigma.all_3[11:728], col="red")
legend("topright", legend=c("One Step Prediction Error", "Estimate of Sigma_matrix"), col=c("black", "red"), lty=1)

# Set plot margins
par(mar = c(5, 4, 4, 6) + 0.1)
# Create plot
plot(co2_tr[11:728] - yt_pred.all_3[11:728], 
     type = "l", 
     ylab = "One Step Prediction Error", 
     xlab = "Observation")
# Add line for estimated sigma
lines(sigma.all_3[11:728], col = "red")
# Add legend
legend("topright", legend = c("One Step Prediction Error", "Estimate of Sigma_matrix"),  col = c("black", "red"), lty = 1)

# Set plot margins
par(mar = c(5, 4, 4, 6) + 0.1)

# Create x-axis tick marks and labels
years <- seq(1980, 2021, by = 5)
xticks <- as.numeric(as.Date(paste(years, "-01-01", sep = "")))
xticklabels <- as.character(years)

# Create plot
plot(co2_tr[11:728] - yt_pred.all_3[11:728], 
     type = "l", 
     ylab = "One Step Prediction Error", 
     xlab = "Year",
     xtick = xticks,
     xticklabels = xticklabels)

# Add line for estimated sigma
lines(sigma.all_3[11:728], col = "red")

# Add legend
legend("bottomright", legend = c("One Step Prediction Error", "Estimate of Sigma_matrix"), col = c("black", "red"), lty = 1, cex=0.8)

#   1.3.4
par(mfrow = c(2,1), mar = c(3,3,2,2)) 

# top plot: actual vs predicted vs months_prediction interval
plot(co2_tr ~ time_tr, type = "l", lwd = 2, main = "Time Series Plot")
lines(yt_pred.all_3[1:718] ~ time_tr, col = "red", lwd = 2)
lines(yt_pred.all_4[1:718] ~ time_tr, col = "blue", lty = 2)
lines(yt_pr.l.all_4[1:718] ~ time_tr, col = "blue", lty = 2)
legend("topleft", legend = c("Actual", "Predicted", "Prediction Interval"),col = c("black", "red", "blue"), lty = c(1, 1, 2), bty = "number_obs", cex = 0.

#   1.3.5
init <- 10
D2010 <- subset(D, year >= 2010)

t <- as.matrix(D2010$time)
y <- as.matrix(D2010$co2)
number_obs <- length(t)
F5 <- matrix(0, nrow=4, ncol=4)
h5 <- matrix(0,nrow=4,ncol=1)
T5 <- 0
theta.all5 <- matrix(NA,ncol=4, nrow=number_obs)
sigma.all5 <- matrix(NA, nrow=number_obs, ncol=1)
yt_pred.all5 <- rep(NA, number_obs)

sigma_el5 <- c()

t.smth5 <- qt(p=0.95, df=(1:number_obs)-4)
t.smth5[1:init] <- NA
yt_pr.u.all5 <- rep(NA, number_obs)
yt_pr.l.all5 <- rep(NA, number_obs)

for (j in 0:(init-1)){
  F5 <- F5 + (lambda^(j))*f(-j)%*%t(f(-j))
  h5 <- h5 + (lambda^(j))*f(-j)*y[init-j]
  T5 <- T5 + lambda^j
  sigma_el5 <- c(sigma_el5, lambda^(init-j-1))
}
ltm5_Sigma <- diag(sigma_el5)

theta.hat5 <- solve(F5, h5)
theta.all5[init,] <- solve(F5, h5)
yt_pred.all5[init+1] <- t(f(1)) %*% theta.hat5

for (i in (init+1):number_obs){
  F5 <- F5 + (lambda^(i-1))*f(-(i-1)) %*% t(f(-(i-1)))
  h5 <- lambda*solve(L) %*% h5 + f(0)*y[i]
  T5 <- 0
  sigma_el5 <- c()
  for (j in 0:(i-1)){
    T5 <- T5 + lambda^j
    sigma_el5 <- append(sigma_el5, lambda^(i-j-1))
  }
  ltm5_Sigma <- diag(sigma_el5)
  theta.hat5 <-  solve(F5, h5)
  theta.all5[i,] <- theta.hat5
  epsilon1 <- y[1:i] - cbind(1, -(i-1):0, sin(2*pi*(-(i-1):0)/p), cos(2*pi*(-(i-1):0)/p)) %*% theta.hat5
  sigma.all5[i] <- sqrt((t(epsilon1)%*% ltm5_Sigma %*% epsilon1)/(T5-4))
  yt_pred.all5[i+1] <- t(f(1)) %*% theta.hat5
  yt_pr.l.all5[i+1] <- yt_pred.all5[i+1] - t.smth[i]*sigma.all5[i]*sqrt(1+t(f(1)) %*% solve(F5) %*% f(1))
  yt_pr.u.all5[i+1] <- yt_pred.all5[i+1] + t.smth[i]*sigma.all5[i]*sqrt(1+t(f(1)) %*% solve(F5) %*% f(1))
}

plot(y~t)
lines(yt_pred.all5[1:116]~t, col="red")
lines(yt_pr.u.all5[1:116]~t, col="blue")
lines(yt_pr.l.all5[1:116]~t, col="blue")

par(mfrow=c(1,1), mar=c(5,5,4,2)+0.1)

#   1.3.5

# New plot
plot(y ~ t, type = "l", lwd = 2, xlab = "Time", ylab = "Value", 
     main = "Time Series Plot with Prediction Interval")

# Add the predicted line and the months_prediction interval
lines(yt_pred.all5[1:116] ~ t, col = "red", lwd = 2)
lines(yt_pr.u.all5[1:116] ~ t, col = "blue", lty = 2)
lines(yt_pr.l.all5[1:116] ~ t, col = "blue", lty = 2)

# Add a legend
legend("topleft", legend = c("Actual", "Predicted", "Prediction Interval"),col = c("black", "red", "blue"), lty = c(1, 1, 2), bty = "number_obs", cex = 0.

#   1.3.6    
month_1 <- t(f(1)) %*% theta.hat_final
month_2 <- t(f(2)) %*% theta.hat_final
month_3 <- t(f(6)) %*% theta.hat_final
month_12 <- t(f(12)) %*% theta.hat_final
month_20 <- t(f(20)) %*% theta.hat_final
month_predictions <- matrix(c(month_1,month_2,month_3,month_12,month_20))
months_all <- c(1,2,6,12,20)
months_prediction <- cbind( months_all, month_predictions)
# New Plot 
plot(months_prediction)

#   1.3.7
y_7 <- matrix(c(yt_pred.all5[number_obs-20+1], yt_pred.all5[number_obs-20+2], yt_pred.all5[number_obs-20+6], yt_pred.all5[number_obs-20+12], yt_pred.all5[number_obs-20+20]))
prediction_new_7 <- cbind(months_all, y_7)

#  1.3.8 
Y <- Dataset_model$co2

F <- matrix(0, nrow=4, ncol=4)
h <- matrix(0,nrow=4,ncol=1)
init <-10
lambda <- 0.9
number_obs = length(Y)

# Burning for 100 months
for (j in 0:(init-1)){
  
  F <- F + lambda^(j) * f(-j)%*%t(f(-j))
  h <- h + lambda^(j) * f(-j)*Y[init-j]
}
local_th <- matrix(0, nrow=718, ncol=4)

for (j in (init+1):number_obs){
  
  F <- F + lambda^(j-1) * f(-(j-1)) %*% t(f(-(j-1)))
  h <- lambda * solve(L) %*% h + f(0) * Y[j]
  theta_hat_local <- solve(F) %*% h
  local_th[j,] <- theta_hat_local
}

p=12

# flip X and negate it
717_to_zerp <- 717:0
local_x_8 <- cbind(1, 717_to_zerp, sin(2*(pi*717_to_zerp)/p), cos(2*(pi*717_to_zerp)/p) )
local_hat_8 <- local_x_8 %*% theta_hat_local
local_hat_8_step <- rep(0, number_obs=718)
errors <- matrix(0, nrow=718, ncol=1)
for (i in 1:718){
  # Predicting - Local trend - Formula 3.105
  local_hat_8[i] <- local_x_8[i,] %*% t(local_th[i,])
  
  # One step error
  if(i>10){
    local_hat_8_step[i] <- local_x_8[i,] %*% t(local_th[i-1,])
    errors[i] <- Y[i] - local_x_8[i,] %*% t(local_th[i-1,])
  }
}

#   ##1.3.8
# Set up the plot region and margin
par(mfrow = c(2,1), mar = c(3,3,2,2))

# Top plot: Estimated mean for each time step
plot(Dataset_model$time, Dataset_model$co2, type = "p", pch = 19, cex = 0.5, col = "red",
     main = "Estimated Mean for Each Time Step", xlab = "Time (Years)", ylab = "Atmospheric CO2 [ppm]")
lines(Dataset_model$time, local_hat_8, type = "p", col = "blue", pch = 19, cex = 0.5)

# Bottom plot: Errors for the estimated mean for each time step
plot(Dataset_model$time, errors, type = "p", pch = 19, cex = 0.5, col = "red",
     main = "Errors for the Estimated Mean for Each Time Step", xlab = "Time (Years)", ylab = "Error", ylim = c(0, 50))
abline(h = 0, lty = 2)  # Add a horizontal line at y = 0


#   1.4.0

SSE = c()

observation_final <- Dataset_model$co2

for (lamda_optimal in seq(0.01,1,by=0.01)){
  p = 12
  L = matrix(c(1,1,0,0, 0,1,0,0, 0,0,cos(2*pi/p),-sin(2*pi/p), 0,0,sin(2*pi/p), cos(2*pi/p) ), nrow=4, ncol=4)
  
  f <- function(j) rbind(1, j, sin((2*pi/p)*j), cos((2*pi/p)*j)) #
  F <- matrix(0, nrow=4, ncol=4)
  h <- matrix(0,nrow=4,ncol=1)
  
  init <- 100
  
  F <- matrix(0, nrow = 4, ncol = 4)
  
  for (j in 0:(init-1)) {
    F <- F + lamda_optimal^j * f(-j) %*% t(f(-j))
  }
  
  h <- 0
  
  for (j in 0:(init-1)) {
    h <- h + lamda_optimal^j * f(-j) * observation_final[init-j]
  }
  theta.hat_final <- solve(F)%*%h
  prediction_final <- rep(0,718)
  
  for (N in (init+1):718){
    
    prediction_final[N] <- t(f(1)) %*% theta.hat_final 
    F <- F + lamda_optimal^(N-1) * f(-N+1) %*% t(f(-N+1))
    h <- lamda_optimal * solve(L) %*% h + f(0) %*% observation_final[N]
    theta.hat_final <- solve(F) %*% h
  }
  
  SSE =c(SSE,sum(abs(observation_final-prediction_final)^2))
  
}

min_final <- which.min(SSE)
lamda_optimal<- min_final/100

#Final Plot
# Plot SSE against lambda
plot(seq(0.01, 1, by = 0.01), SSE, type = "l", main = "Optimal lambda", 
     xlab = "lambda", ylab = "S(lambda)")

# Add red point at minimum SSE with label
points(seq(0.01, 1, by = 0.01)[min_final], SSE[min_final], col = "red", pch = 19)
text(seq(0.01, 1, by = 0.01)[min_final] + 0.02, SSE[min_final],paste0("Lambda = ", round(seq(0.01, 1, by = 0.01)[min_final], 2)), col = "red")

# Add horizontal line at minimum SSE
abline(h = SSE[min_final], col = "gray", lty = 2)

